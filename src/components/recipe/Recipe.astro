---

---

<div class="parent"></div>

<script>
  // Define interfaces for the recipe step structure
  interface Ingredient {
    id: number;
    amount: string | null;
  }

  interface RecipeStep {
    id: number;
    action: string;
    options: string | null;
    parents: number[] | null;
    ingredients: Ingredient[] | null;
  }

  function calculateGridAreas(steps: RecipeStep[]): [
    number,
    Record<
      number,
      {
        currentGridRowStart: number;
        currentGridColumnStart: number;
        nextGridRowStart: number;
        nextGridColumnStart: number;
        borderRadius: number;
        alignItems: string;
      }
    >,
    Record<
      number,
      {
        currentGridRowStart: number;
        quantity: string;
        ingredient: string;
        amount: string;
        miseEnPlace: string;
      }
    >,
  ] {
    // Sort steps by their dependencies
    const sortedSteps = topologicalSort(steps);

    // Create a mapping to track each step's grid placement
    const gridPlacementSteps: Record<
      number,
      {
        currentGridRowStart: number;
        currentGridColumnStart: number;
        nextGridRowStart: number;
        nextGridColumnStart: number;
        borderRadius: number;
        alignItems: string;
      }
    > = {};

    // Handling ingredients for each step
    const gridPlacementIngredients: Record<
      number,
      {
        currentGridRowStart: number;
        quantity: string;
        ingredient: string;
        amount: string;
        miseEnPlace: string;
      }
    > = {};

    let currentGridRowStart = 1;
    let nextGridRowStart = 1;
    let currentGridColumnStart = 4;
    let nextGridColumnStart = 4;

    let columnEndPointer = 5;

    sortedSteps.forEach((step, index) => {
      // Calculate the number of ingredients added in the step
      const numOfIngredientsAddedInStep = step.ingredients?.length ?? 0;

      if (numOfIngredientsAddedInStep >= 1) {
        console.log(step.ingredients);
      }

      // Calculate the number of parents for the step
      const numParents = step.parents?.length ?? 0;

      nextGridRowStart = currentGridRowStart + numOfIngredientsAddedInStep;

      if (numParents === 0 && numOfIngredientsAddedInStep >= 1) {
        // If no parents, place the step in the first column
        currentGridColumnStart = 4;
        nextGridColumnStart = columnEndPointer;
      } else if (numParents >= 1 && numOfIngredientsAddedInStep === 0) {
        // If there are only parents in step (and no added ingredients)
        // it is a combination of the results of previous steps

        const parentPlacements =
          step.parents
            ?.map((parentId) => gridPlacementSteps[parentId])
            .filter(Boolean) || [];
        // Rows:
        // currentGridRowStart = minimum currentGridRowStart of the parents
        // nextGridRowStart = maximum nextGridRowStart of the parents
        currentGridRowStart = Math.min(
          ...parentPlacements.map((p) => p.currentGridRowStart)
        );
        nextGridRowStart = Math.max(
          ...parentPlacements.map((p) => p.nextGridRowStart)
        );

        // Columns:
        // currentGridColumnStart = maximum nextGridColumnStart of the parents
        // nextGridColumnStart = currentGridColumnStart + 1
        currentGridColumnStart = Math.max(
          ...parentPlacements.map((p) => p.nextGridColumnStart)
        );
        nextGridColumnStart = currentGridColumnStart + 1;
      } else if (numParents >= 1 && numOfIngredientsAddedInStep >= 1) {
        const parentPlacements =
          step.parents
            ?.map((parentId) => gridPlacementSteps[parentId])
            .filter(Boolean) || [];

        // Rows
        currentGridRowStart = 1;
        nextGridRowStart =
          Math.max(...parentPlacements.map((p) => p.nextGridRowStart)) +
          numOfIngredientsAddedInStep;

        // Columns
        currentGridColumnStart = 4;
        nextGridColumnStart =
          Math.max(...parentPlacements.map((p) => p.nextGridColumnStart)) + 1;
      }

      // If ingredients are added in the next step the border should be rounded
      let borderRadius = 0;
      if (index + 1 < sortedSteps.length && sortedSteps[index + 1]) {
        borderRadius =
          (sortedSteps[index + 1].ingredients?.length ?? 0 >= 1) ? 20 : 0;
      }

      // Determine text alignment
      let alignItems = "end";
      if (numOfIngredientsAddedInStep != 1) {
        alignItems = "center";
      }

      // Assign the calculated placement to the current step
      gridPlacementSteps[step.id] = {
        currentGridRowStart: currentGridRowStart,
        currentGridColumnStart: currentGridColumnStart,
        nextGridRowStart: nextGridRowStart,
        nextGridColumnStart: nextGridColumnStart,
        borderRadius: borderRadius,
        alignItems: alignItems,
      };

      // Update row and column pointers for the next step
      currentGridRowStart = nextGridRowStart;
      if (numParents >= 1) {
        columnEndPointer++;
      }
    });

    // Total number
    let numberOfColumns = columnEndPointer - 1;
    return [numberOfColumns, gridPlacementSteps, gridPlacementIngredients];
  }

  // Topological sort to handle step dependencies
  function topologicalSort(steps: RecipeStep[]): RecipeStep[] {
    const graph = new Map<number, RecipeStep>();
    const visited = new Set<number>();
    const sortedSteps: RecipeStep[] = [];

    // Create adjacency list
    steps.forEach((step) => {
      graph.set(step.id, step);
    });

    function visit(step: RecipeStep): void {
      if (visited.has(step.id)) return;
      visited.add(step.id);

      // Recursively visit parents first
      if (step.parents) {
        step.parents.forEach((parentId) => {
          const parent = graph.get(parentId);
          if (parent && !visited.has(parentId)) {
            visit(parent);
          }
        });
      }

      sortedSteps.push(step);
    }

    // Visit all steps
    steps.forEach((step) => {
      if (!visited.has(step.id)) {
        visit(step);
      }
    });
    return sortedSteps;
  }

  // Main function to generate HTML and CSS
  function generateRecipeGrid(recipeSteps: RecipeStep[]): HTMLDivElement {
    // Calculate grid placements
    const [numberOfColumns, gridPlacementSteps, gridPlacementIngredients] =
      calculateGridAreas(recipeSteps);

    // Generate CSS for parent
    let cssRules = `
      .parent {
          grid-template-columns: repeat(${numberOfColumns}, 1fr);
          grid-template-rows: repeat(${recipeSteps.length}, 1fr);
      }`;

    // Generate dynamic CSS for each step
    recipeSteps.forEach((step) => {
      const placement = gridPlacementSteps[step.id];
      cssRules += `
      .step-${step.id} {
          grid-area: ${placement.currentGridRowStart} / ${placement.currentGridColumnStart} / ${placement.nextGridRowStart} / ${placement.nextGridColumnStart};
          align-items: ${placement.alignItems};
          border-bottom-right-radius: ${placement.borderRadius}px;
      }`;
    });

    // Generate CSS for ingredients
    cssRules += `
      .quantity-1 {
          grid-area: 1 / 1 / 2 / 2;
      }
      .name-1 {
          grid-area: 1 / 2 / 2 / 3;
      }
      .mep-1 {
          grid-area: 1 / 3 / 2 / 4;
      }`;

    // Generate HTML for the steps
    const htmlStepContent = recipeSteps
      .map((step) => `<div class="step-${step.id}">${step.action}</div>`)
      .join("");

    const htmlIngredientContent = `<div class="quantity-1">test</div>
                                   <div class="name-1">name-1</div>
                                   <div class="mep-1">mep-1</div>`;

    // Create style element
    const styleElement = document.createElement("style");
    styleElement.textContent = cssRules;

    // Create container for HTML and CSS
    const container = document.createElement("div");
    container.innerHTML = htmlIngredientContent;
    container.insertAdjacentHTML("beforeend", htmlStepContent);
    container.appendChild(styleElement);

    return container;
  }

  // Example usage:
  function renderRecipeGrid(jsonString: string): void {
    const parsedData = JSON.parse(jsonString);
    const recipeSteps: RecipeStep[] = parsedData.steps;
    const gridContainer = generateRecipeGrid(recipeSteps);

    const parentDiv = document.querySelector(".parent");
    if (parentDiv) {
      parentDiv.append(...gridContainer.children);
    }
  }

  const ingredients = {
    ingredients: [
      {
        id: 1,
        name: "lamb roast",
        quantity: "1 large, 4 to 6 pounds",
        mise_en_place: null,
        options:
          "bone-in leg (these can be as large as 8 pounds), semiboneless leg, bone-in shoulder, boneless butterflied leg or double loin",
        notes: "with a cap of fat",
      },
      {
        id: 2,
        name: "anchovies",
        quantity: "2 ounces (1 can)",
        mise_en_place: null,
        options: "3 tablespoons Dijon mustard",
        notes: "packed in olive oil, drained",
      },
      {
        id: 3,
        name: "fresh rosemary",
        quantity: "Leaves from 6 sprigs (2 heaping tablespoons leaves)",
        mise_en_place: null,
        options: null,
        notes: "plus extra sprigs and branches for garnish",
      },
      {
        id: 4,
        name: "garlic cloves",
        quantity: "6",
        mise_en_place: "smashed and peeled",
        options: null,
        notes: null,
      },
      {
        id: 5,
        name: "unsalted butter",
        quantity: "4 ounces",
        mise_en_place: "softened at room temperature",
        options: null,
        notes: null,
      },
      {
        id: 6,
        name: "black pepper",
        quantity: null,
        mise_en_place: null,
        options: null,
        notes: null,
      },
      {
        id: 7,
        name: "lemon",
        quantity: "1",
        mise_en_place: "cut in half",
        options: null,
        notes: null,
      },
      {
        id: 8,
        name: "white wine",
        quantity: "1¾ cups",
        mise_en_place: null,
        options: null,
        notes: "plus extra for gravy",
      },
    ],
  };

  const recipeSteps = {
    steps: [
      {
        id: 1,
        action: "make incisions",
        options: null,
        parents: null,
        ingredients: [
          {
            id: 1,
            amount: null,
          },
        ],
      },
      {
        id: 2,
        action: "blend into a chunky paste",
        options: "using a mortar and pestle or a blender",
        parents: null,
        ingredients: [
          {
            id: 2,
            amount: "⅔",
          },
          {
            id: 3,
            amount: null,
          },
          {
            id: 4,
            amount: null,
          },
        ],
      },
      {
        id: 3,
        action: "press paste deeply into incisions",
        options: null,
        parents: [1, 2],
        ingredients: null,
      },
      {
        id: 4,
        action: "mix into a paste",
        options: null,
        parents: null,
        ingredients: [
          {
            id: 2,
            amount: "⅓",
          },
          {
            id: 5,
            amount: null,
          },
        ],
      },
      {
        id: 5,
        action: "smear mixture all over the surface",
        options: null,
        parents: [1, 4],
        ingredients: null,
      },
      {
        id: 6,
        action: "season liberally",
        options: null,
        parents: [5],
        ingredients: [
          {
            id: 6,
            amount: null,
          },
        ],
      },
      {
        id: 7,
        action: "place on a rack in a roasting pan, fat side up",
        options: null,
        parents: [6],
        ingredients: null,
      },
      {
        id: 8,
        action: "squeeze over",
        options: null,
        parents: [7],
        ingredients: [
          {
            id: 7,
            amount: null,
          },
        ],
      },
      {
        id: 9,
        action: "pour around the roast into the pan",
        options: null,
        parents: [8],
        ingredients: [
          {
            id: 8,
            amount: null,
          },
        ],
      },
    ],
  };

  const jsonString = JSON.stringify(recipeSteps);
  renderRecipeGrid(jsonString);
</script>
