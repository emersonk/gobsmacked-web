---

---

<!-- Recipe has 9 steps which means 9 divs -->
<div class="parent">
  <div class="div1 rounded">Make 2 inch deep incisions through fat cap</div>
  <div class="div2">Using mortar and pestle, blend into chunky paste</div>
  <div class="div3 rounded">Press paste deeply into incisions</div>
  <div class="div4">Mix into paste</div>
  <div class="div5 rounded">Smear over roast</div>
  <div class="div6 rounded">Place lamb in rack</div>
  <div class="div7">Season liberally</div>
  <div class="div8 rounded">Squeeze halves over</div>
  <div class="div9 rounded">Pour wine around the roast into the pan</div>
</div>

<style>
  .parent {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    grid-template-rows: repeat(9, 1fr);
    grid-column-gap: 0px;
    grid-row-gap: 0px;
  }

  .rounded {
    border-bottom-right-radius: 20px;
  }

  .parent div {
    display: flex;
    justify-content: center;
    text-align: center;
    box-shadow: 0 5px 1px rgba(0, 0, 0, 0.3);
  }

  .div1 {
    grid-area: 1 / 1 / 2 / 2;
    align-items: center;
    border: 1px solid rgb(17, 14, 20);
  }
  .div2 {
    grid-area: 2 / 1 / 5 / 2;
    align-items: center;
    border: 1px solid rgb(32, 25, 38);
  }
  .div3 {
    grid-area: 1 / 2 / 5 / 3;
    align-items: center;
    border: 1px solid rgb(22, 11, 33);
  }
  .div4 {
    grid-area: 5 / 1 / 7 / 3;
    align-items: center;
    border: 1px solid rgb(31, 16, 46);
  }
  .div5 {
    grid-area: 1 / 3 / 7 / 4;
    align-items: center;
    border: 1px solid rgb(48, 30, 66);
  }
  .div6 {
    grid-area: 1 / 5 / 8 / 6;
    align-items: center;
    border: 1px solid rebeccapurple;
  }
  .div7 {
    grid-area: 1 / 1 / 8 / 5;
    align-items: end;
    border: 1px solid rgb(111, 38, 183);
  }
  .div8 {
    grid-area: 1 / 1 / 9 / 7;
    align-items: end;
    border: 1px solid rgb(125, 24, 225);
  }
  .div9 {
    grid-area: 1 / 1 / 10 / 8;
    align-items: end;
    border: 1px solid rgb(128, 0, 255);
  }
</style>
<script>
  // Define interfaces for the recipe step structure
  interface Ingredient {
    id: number;
    amount: string | null;
  }

  interface RecipeStep {
    id: number;
    action: string;
    options: string | null;
    parents: number[] | null;
    ingredients: Ingredient[] | null;
  }

  function calculateGridAreas(
  steps: RecipeStep[]
): Record<number, { 
  currentGridRowStart: number; 
  currentGridColumnStart: number;  
  nextGridRowStart: number; 
  nextGridColumnStart: number; 
}> {
  // Sort steps by their dependencies
  const sortedSteps = topologicalSort(steps);

  // Create a mapping to track each step's grid placement
  const gridPlacements: Record<number, { 
    currentGridRowStart: number; 
    currentGridColumnStart: number;  
    nextGridRowStart: number; 
    nextGridColumnStart: number; 
  }> = {};

  let currentGridRowStart = 1;
  let nextGridRowStart = 1;
  let currentGridColumnStart = 1;
  let nextGridColumnStart = 1;

  let columnEndPointer = 2;

  sortedSteps.forEach((step, index) => {
    // Calculate the number of ingredients added in the step
    const numOfIngredientsAddedInStep = step.ingredients?.length ?? 0;
    nextGridRowStart = currentGridRowStart + numOfIngredientsAddedInStep;

    // Calculate the number of parents for the step
    const numParents = step.parents?.length ?? 0;

    if (numParents === 0) {
      // If no parents, place the step in the first column
      currentGridColumnStart = 1;
      nextGridColumnStart = columnEndPointer;
    } else {
      // If there are parents, calculate placement based on parents

      // Rows:
      // currentGridRowStart = minimum currentGridRowStart of the parents
      // nextGridRowStart = maximum nextGridRowStart of the parents
      const parentPlacements = step.parents?.map(parentId => gridPlacements[parentId]).filter(Boolean) || [];

      if (parentPlacements.length > 0) {
        currentGridRowStart = Math.min(...parentPlacements.map(p => p.currentGridRowStart));
        nextGridRowStart = Math.max(...parentPlacements.map(p => p.nextGridRowStart));

        // Columns:
        // currentGridColumnStart = maximum nextGridColumnStart of the parents
        // nextGridColumnStart = currentGridColumnStart + 1
        currentGridColumnStart = Math.max(...parentPlacements.map(p => p.nextGridColumnStart));
        nextGridColumnStart = currentGridColumnStart + 1;
      }
    }

    // Assign the calculated placement to the current step
    gridPlacements[step.id] = {
      currentGridRowStart: currentGridRowStart,
      currentGridColumnStart: currentGridColumnStart,
      nextGridRowStart: nextGridRowStart,
      nextGridColumnStart: nextGridColumnStart,
    };

    // Update row and column pointers for the next step
    currentGridRowStart = nextGridRowStart;
    if (numParents >= 1) {
      columnEndPointer++;
    }
  });

  console.log(gridPlacements);
  return gridPlacements;
}


  // Topological sort to handle step dependencies
  function topologicalSort(steps: RecipeStep[]): RecipeStep[] {
    const graph = new Map<number, RecipeStep>();
    const visited = new Set<number>();
    const sortedSteps: RecipeStep[] = [];

    // Create adjacency list
    steps.forEach((step) => {
      graph.set(step.id, step);
    });

    function visit(step: RecipeStep): void {
      if (visited.has(step.id)) return;
      visited.add(step.id);

      // Recursively visit parents first
      if (step.parents) {
        step.parents.forEach((parentId) => {
          const parent = graph.get(parentId);
          if (parent && !visited.has(parentId)) {
            visit(parent);
          }
        });
      }

      sortedSteps.push(step);
    }

    // Visit all steps
    steps.forEach((step) => {
      if (!visited.has(step.id)) {
        visit(step);
      }
    });
    console.log(sortedSteps);
    return sortedSteps;
  }

  // Main function to generate HTML and CSS
  function generateRecipeGrid(recipeSteps: RecipeStep[]): HTMLDivElement {
    // Calculate grid placements
    const gridPlacements = calculateGridAreas(recipeSteps);

    // Generate CSS
    let cssRules = `
.parent {
    display: grid;
    grid-template-columns: repeat(7, 1fr);
    grid-template-rows: repeat(9, 1fr);
    grid-column-gap: 0px;
    grid-row-gap: 0px;
}
.rounded {
    border-bottom-right-radius: 20px;
}
.parent div {
    display: flex;
    justify-content: center;
    text-align: center;
    box-shadow: 0 5px 1px rgba(0, 0, 0, 0.3);
}
`;

    // Generate dynamic CSS for each step
    recipeSteps.forEach((step) => {
      const placement = gridPlacements[step.id];
      cssRules += `
      .div${step.id} {
          grid-area: ${placement.currentGridRowStart} / ${placement.currentGridColumnStart} / ${placement.nextGridRowStart} / ${placement.nextGridColumnStart};
          align-items: center;
      }
  `;
    });

    // Generate HTML
    let htmlContent = '<div class="parent">';
    recipeSteps.forEach((step) => {
      const roundedClass = Math.random() > 0.5 ? "rounded" : "";
      htmlContent += `
<div class="div${step.id} ${roundedClass}">${step.action}</div>`;
    });
    htmlContent += "\n</div>";

    // Create style element
    const styleElement = document.createElement("style");
    styleElement.textContent = cssRules;

    // Create container for HTML and CSS
    const container = document.createElement("div");
    container.innerHTML = htmlContent;
    container.appendChild(styleElement);

    return container;
  }

  // Example usage:
  function renderRecipeGrid(jsonString: string): void {
    const parsedData = JSON.parse(jsonString);
    const recipeSteps: RecipeStep[] = parsedData.steps; // Access the 'steps' array
    const gridContainer = generateRecipeGrid(recipeSteps);
    document.body.appendChild(gridContainer);
  }

  const recipeSteps = {
    steps: [
      {
        id: 1,
        action: "make incisions",
        options: null,
        parents: null,
        ingredients: [
          {
            id: 1,
            amount: null,
          },
        ],
      },
      {
        id: 2,
        action: "blend into a chunky paste",
        options: "using a mortar and pestle or a blender",
        parents: null,
        ingredients: [
          {
            id: 2,
            amount: "⅔",
          },
          {
            id: 3,
            amount: null,
          },
          {
            id: 4,
            amount: null,
          },
        ],
      },
      {
        id: 3,
        action: "press paste deeply into incisions",
        options: null,
        parents: [1, 2],
        ingredients: null,
      },
      {
        id: 4,
        action: "mix into a paste",
        options: null,
        parents: null,
        ingredients: [
          {
            id: 2,
            amount: "⅓",
          },
          {
            id: 5,
            amount: null,
          },
        ],
      },
      {
        id: 5,
        action: "smear mixture all over the surface",
        options: null,
        parents: [1, 4],
        ingredients: null,
      },
      {
        id: 6,
        action: "season liberally",
        options: null,
        parents: [5],
        ingredients: [
          {
            id: 6,
            amount: null,
          },
        ],
      },
      {
        id: 7,
        action: "place on a rack in a roasting pan, fat side up",
        options: null,
        parents: [6],
        ingredients: null,
      },
      {
        id: 8,
        action: "squeeze over",
        options: null,
        parents: [7],
        ingredients: [
          {
            id: 7,
            amount: null,
          },
        ],
      },
      {
        id: 9,
        action: "pour around the roast into the pan",
        options: null,
        parents: [8],
        ingredients: [
          {
            id: 8,
            amount: null,
          },
        ],
      },
    ],
  };

  const jsonString = JSON.stringify(recipeSteps);
  renderRecipeGrid(jsonString);
</script>
