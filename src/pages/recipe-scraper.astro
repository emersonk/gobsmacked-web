---
import BaseLayout from "@/layouts/BaseLayout.astro";
import { databases } from "@/api/DatabaseService";
import { ID, Query } from "appwrite";
import { fetchRecipe } from "@/api/RecipeService";
import { createHash } from 'crypto';

let error: string | null = null;

function hashString(input: string): string {
    const hash = createHash('md5');
    hash.update(input);
    return hash.digest('hex');
}

// Server-side form handling
if (Astro.request.method === "POST") {
  try {
    const formData = await Astro.request.formData();
    const recipeUrl = formData.get("recipeUrl");

    if (typeof recipeUrl !== "string") {
      throw new Error("Recipe URL must be a string");
    }

    // Check if the URL already exists in the DB
    const r = await databases.listDocuments(
      import.meta.env.PUBLIC_APPWRITE_DATABASE_ID,
      import.meta.env.PUBLIC_APPWRITE_COLLECTION_ID,
      [
        Query.equal("OriginalURL", recipeUrl)
      ]
    );

    if (r.total === 1){
      // Load recipe from database and redirect to page
      const recipe = r.documents[0]
      return Astro.redirect(`/recipes/${recipe.Slug}`);
    } else {
      // Format recipe, save to database,
      const formattedRecipe = await fetchRecipe(recipeUrl);
      const hashedValue = hashString('recipeUrl');
      const urlSafeTitle = formattedRecipe.original_recipe.title
        .trim()
        .toLowerCase()
        .replace(/[^a-z0-9\s-]/g, '')
        .replace(/\s+/g, '-');

      const data = {
        OriginalURL: recipeUrl,
        Ingredients: formattedRecipe.ingredients,
        Steps: formattedRecipe.steps,
        Slug: `${urlSafeTitle}-${hashedValue}`,
        Title: formattedRecipe.original_recipe.title
      };

      // TODO handle errors when saving
      const results = await databases.createDocument(
        import.meta.env.PUBLIC_APPWRITE_DATABASE_ID,
        import.meta.env.PUBLIC_APPWRITE_COLLECTION_ID,
        ID.unique(),
        data
      );

      return Astro.redirect(`/recipes/${data.Slug}`);
    }
  } catch (err) {
    error = `Failed to process recipe: ${err instanceof Error ? err.message : "Unknown error"}`;
  }
}
---

<BaseLayout>
  <div class="container">
    <h1>Recipe Scraper</h1>

    <form method="POST" class="form">
      <input
        type="url"
        name="recipeUrl"
        class="input"
        placeholder="Enter recipe URL"
        required
      />
      <button type="submit" class="button">Scrape Recipe</button>
    </form>

    {error && <div class="error">{error}</div>}
  </div>
</BaseLayout>
